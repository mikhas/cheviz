# AUTOGENERATED! DO NOT EDIT! File to edit: 01_data.ipynb (unless otherwise specified).

__all__ = ['fetch', 'games', 'makeMoveSequencer', 'diffReduce']

# Cell
from pathlib import Path
import urllib.request
import shutil

def fetch()->dict:
    result = {}
    url_prefix = 'https://pgnchessbook.org/wp-content/uploads/2019/08/'
    data_files = ['WorldChamp_1986_to_2018.pgn', 'Candidates_1953.pgn', 'WijkaanZee2019.pgn', 'Shamkir2019.pgn', 'Baden2019.pgn']

    for file in data_files:
        src = url_prefix + file
        dst = Path().absolute() / 'data' / file
        if not dst.is_file():
            with urllib.request.urlopen(src) as response, open(dst, 'wb') as dst_file:
                shutil.copyfileobj(response, dst_file)

        if dst.is_file():
            result[file] = dst

    return result

# Cell
import chess.pgn

def games(pgn_name:str)->chess.pgn.Game:
    with open(pgn_name, 'r') as pgn_file:
        games_read = []
        while True:
            game = chess.pgn.read_game(pgn_file)
            if game is None:
                break

            yield (game.board(), game.mainline_moves(), game.headers)

# Cell
from typing import Callable
import numpy as np
from cheviz import core

def makeMoveSequencer(moves_list:list)->Callable:
    board = chess.Board()
    ts = core.makeThreatenedSquares(board=board)

    def moveSequencer(moves_range:range, side:bool, square_filter:Callable)->np.ndarray:
        result = []
        board.reset()

        for index in range(0, min(len(moves_list), moves_range.stop)):
            was_our_turn = board.turn == side # check *before* pushing next move
            board.push(moves_list[index])
            if index >= moves_range.start and was_our_turn:
                result.append(ts(side, square_filter))

        return result

    return moveSequencer

# Cell
def diffReduce(data:list):
    while len(data) > 1:
        data = [data[i] - data[i + 1] for i in range(len(data) - 1)]
    data = data.pop()
    return data