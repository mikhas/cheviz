# AUTOGENERATED! DO NOT EDIT! File to edit: 04_processor.ipynb (unless otherwise specified).

__all__ = ['Processor']

# Cell
from typing import Callable
import pandas as pd
import numpy as np
import chess.engine
import cheviz.core as cco
import cheviz.data as cda
import cheviz.stockfish as cst

# Cell
class Processor:
    def __init__(self, engine_maker:Callable, game:cda.Game, first_move_by_white=True):
        self.engine_maker = engine_maker
        self.moves = list(game.moves)
        self.first_move_by_white = first_move_by_white
        self.ms = cda.makeMoveSequencer(self.moves)


    def run(self, reduced:Callable, square_filter:Callable, echo:int=1, depth=20):
        engine = self.engine_maker()
        result = pd.DataFrame(columns=['Side', 'Score',
                                       'LastWhiteMove', 'LastBlackMove',
                                       'ViewForWhite', 'ViewForBlack',
                                       'Zeros'])

        for curr_move in range(len(self.moves)):
            adjusted_wm = (curr_move // 2) * 2 + 1
            adjusted_bm = ((curr_move + 1) // 2) * 2

            side = bool((curr_move + 1) % 2) # white: 1, black: 0, same as in python-chess
            if not self.first_move_by_white:
                adjusted_wm, adjusted_bm = adjusted_bm, adjusted_wm # not tested!

            last_white_move = self.moves[abs(adjusted_wm - 1)]
            last_black_move = self.moves[abs(adjusted_bm - 1)]

            white = self.ms(range(adjusted_wm - echo, adjusted_wm), chess.WHITE, square_filter)
            black = self.ms(range(adjusted_bm - echo, adjusted_bm), chess.BLACK, square_filter)
            reduced_white = reduced(white.result)
            reduced_black = reduced(black.result)

            info = engine.analyse(white.board if side else black.board, chess.engine.Limit(depth=depth))

            result.loc[curr_move] = ['White' if side else 'Black', info['score'],
                                     last_white_move, last_black_move,
                                     reduced_white, reduced_black,
                                     cda.countZeros(np.logical_or(reduced_white, reduced_black))]

        engine.quit() # This is important, otherwise we leak opened file objects!
        return result