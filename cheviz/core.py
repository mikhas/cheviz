# AUTOGENERATED! DO NOT EDIT! File to edit: 00_core.ipynb (unless otherwise specified).

__all__ = ['makeThreatenedSquares', 'show', 'defence', 'attack']

# Cell
from typing import Callable
import matplotlib.pyplot as plt
import numpy as np
import chess


def makeThreatenedSquares() -> Callable:
    max_index = len(chess.SQUARES) - 1
    board = chess.Board()

    def threatenedSquares(side:bool, pos_fen:str, filter_by:Callable = None)->np.ndarray:
        board.set_fen(pos_fen)
        data = np.zeros((max_index + 1,))

        for i in range(max_index + 1):
            if filter_by == None or filter_by(board, side, i):
                data[max_index - i] = len(board.attackers(side, i))

        return data

    return threatenedSquares

def show(data:np.ndarray):
    return plt.matshow(data.reshape(8, 8))

# Cell
def defence(board:chess.Board, side:bool, square:int)->bool:
    return board.piece_at(square).color == side if board.piece_at(square) else False

def attack(board:chess.Board, side:bool, square:int)->bool:
    return not defence(board, side, square)
