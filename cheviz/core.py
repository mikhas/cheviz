# AUTOGENERATED! DO NOT EDIT! File to edit: 00_core.ipynb (unless otherwise specified).

__all__ = ['makeThreatenedSquares', 'show', 'defence', 'attack']

# Cell
from typing import Callable
import matplotlib.pyplot as plt
import numpy as np
import chess

def makeThreatenedSquares(**kwargs) -> Callable:
    board = kwargs['board'] if 'board' in kwargs else chess.Board()
    if 'fen' in kwargs:
        board.set_fen(kwargs['fen'])

    max_index = len(chess.SQUARES) - 1
    dim = round((max_index + 1) ** 0.5)

    def threatenedSquares(side:bool, filter_by:Callable=None)->np.ndarray:
        data = np.zeros((max_index + 1,))

        for i in range(max_index + 1):
            if filter_by == None or filter_by(board, side, i):
                row_offset = (dim - 1 - (i // dim)) * dim
                data[row_offset + i % dim] = len(board.attackers(side, i))

        return data

    return threatenedSquares

def show(data:np.ndarray):
    return plt.matshow(data.reshape(8, 8))

# Cell
def defence(board:chess.Board, side:bool, square:int)->bool:
    return board.piece_at(square).color == side if board.piece_at(square) else False

def attack(board:chess.Board, side:bool, square:int)->bool:
    return not defence(board, side, square)
